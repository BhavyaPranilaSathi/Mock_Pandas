Mock_Pandas


1 Problem 1 : Not Boring Movies  

import pandas as pd

def not_boring_movies(cinema: pd.DataFrame) -> pd.DataFrame:
    df = cinema[(cinema['id']%2==1)&(cinema['description']!= 'boring')]
    return df.sort_values(by='rating', ascending = False)




2 Problem 2 : Biggest Single Number 


import pandas as pd

def biggest_single_number(my_numbers: pd.DataFrame) -> pd.DataFrame:
    df = my_numbers['num'].drop_duplicates(keep = False)
    max_df = df.max()
    return pd.DataFrame({'num': [max_df]})




3 Problem 3 :Sales Analysis III 


import pandas as pd

def sales_analysis(product: pd.DataFrame, sales: pd.DataFrame) -> pd.DataFrame:
    outside_Q1=sales[(sales['sale_date']<'2019-01-01')|(sales['sale_date']>'2019-03-31')]['product_id']
    sold_Q1=sales[(sales['sale_date']>='2019-01-01')&(sales['sale_date']<='2019-03-31')]
    df= product.merge(sold_Q1, on='product_id')
    result = df[~(df['product_id'].isin(outside_Q1))]
    return result[['product_id','product_name']].drop_duplicates()




4 Problem 4 : Market Analysis I 


import pandas as pd

def market_analysis(users: pd.DataFrame, orders: pd.DataFrame, items: pd.DataFrame) -> pd.DataFrame:
    df = orders[(orders['order_date'] >= '2019-01-01') & (orders['order_date'] < '2020-01-01')]
    df_count = df.groupby('buyer_id').size().reset_index(name='orders_in_2019')
    merged_df = users.merge(df_count, left_on='user_id', right_on='buyer_id', how='left').fillna(0)
    result = merged_df[['user_id', 'join_date', 'orders_in_2019']].rename(columns={'user_id': 'buyer_id'})  
    return result


